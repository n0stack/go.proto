// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network/v0/model.proto

/*
Package pnetwork is a generated protocol buffer package.

It is generated from these files:
	network/v0/model.proto

It has these top-level messages:
	Network
	Spec
	Status
	GetRequest
	ApplyRequest
	DeleteRequest
*/
package pnetwork

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import n0stack_metadata "github.com/n0stack/go.proto/metadata/v0"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Spec_NetworkType int32

const (
	Spec_FLAT Spec_NetworkType = 0
	Spec_VLAN Spec_NetworkType = 1
)

var Spec_NetworkType_name = map[int32]string{
	0: "FLAT",
	1: "VLAN",
}
var Spec_NetworkType_value = map[string]int32{
	"FLAT": 0,
	"VLAN": 1,
}

func (x Spec_NetworkType) String() string {
	return proto.EnumName(Spec_NetworkType_name, int32(x))
}
func (Spec_NetworkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Network struct {
	Id       string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Metadata *n0stack_metadata.Metadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *Spec                      `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status   *Status                    `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Network) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Network) GetMetadata() *n0stack_metadata.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Network) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Network) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Spec struct {
	Type        Spec_NetworkType `protobuf:"varint,1,opt,name=type,enum=n0stack.network.Spec_NetworkType" json:"type,omitempty"`
	NetworkID   uint64           `protobuf:"varint,2,opt,name=networkID" json:"networkID,omitempty"`
	Ipv4Cidr    string           `protobuf:"bytes,3,opt,name=ipv4Cidr" json:"ipv4Cidr,omitempty"`
	Ipv4Gateway string           `protobuf:"bytes,4,opt,name=ipv4Gateway" json:"ipv4Gateway,omitempty"`
	NameServer  string           `protobuf:"bytes,5,opt,name=nameServer" json:"nameServer,omitempty"`
	Domain      string           `protobuf:"bytes,6,opt,name=domain" json:"domain,omitempty"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Spec) GetType() Spec_NetworkType {
	if m != nil {
		return m.Type
	}
	return Spec_FLAT
}

func (m *Spec) GetNetworkID() uint64 {
	if m != nil {
		return m.NetworkID
	}
	return 0
}

func (m *Spec) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *Spec) GetIpv4Gateway() string {
	if m != nil {
		return m.Ipv4Gateway
	}
	return ""
}

func (m *Spec) GetNameServer() string {
	if m != nil {
		return m.NameServer
	}
	return ""
}

func (m *Spec) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type Status struct {
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ApplyRequest struct {
	Id       string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Metadata *n0stack_metadata.Metadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *Spec                      `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApplyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApplyRequest) GetMetadata() *n0stack_metadata.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ApplyRequest) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Network)(nil), "n0stack.network.Network")
	proto.RegisterType((*Spec)(nil), "n0stack.network.Spec")
	proto.RegisterType((*Status)(nil), "n0stack.network.Status")
	proto.RegisterType((*GetRequest)(nil), "n0stack.network.GetRequest")
	proto.RegisterType((*ApplyRequest)(nil), "n0stack.network.ApplyRequest")
	proto.RegisterType((*DeleteRequest)(nil), "n0stack.network.DeleteRequest")
	proto.RegisterEnum("n0stack.network.Spec_NetworkType", Spec_NetworkType_name, Spec_NetworkType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkService service

type NetworkServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Network, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*Network, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/n0stack.network.NetworkService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/n0stack.network.NetworkService/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/n0stack.network.NetworkService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkService service

type NetworkServiceServer interface {
	Get(context.Context, *GetRequest) (*Network, error)
	Apply(context.Context, *ApplyRequest) (*Network, error)
	Delete(context.Context, *DeleteRequest) (*google_protobuf.Empty, error)
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.network.NetworkService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.network.NetworkService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.network.NetworkService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n0stack.network.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NetworkService_Get_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _NetworkService_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NetworkService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/v0/model.proto",
}

func init() { proto.RegisterFile("network/v0/model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0x2e, 0x0b, 0xed, 0x5b, 0x28, 0x93, 0x25, 0xba, 0x28, 0x1b, 0xa3, 0xcb, 0x69,
	0x5c, 0xec, 0x51, 0xfe, 0x5c, 0x90, 0x90, 0x3a, 0x06, 0x15, 0xd2, 0xd8, 0xc1, 0x9b, 0x38, 0x70,
	0x73, 0x93, 0x97, 0x12, 0xad, 0xa9, 0x4d, 0xe2, 0x76, 0xca, 0x91, 0x0f, 0xc4, 0xf7, 0xe1, 0x83,
	0xf0, 0x01, 0x50, 0x1c, 0x77, 0x2d, 0x0d, 0x15, 0x37, 0x6e, 0xaf, 0xfd, 0xfc, 0xfc, 0xfa, 0x79,
	0x6c, 0xbd, 0xd0, 0x9b, 0xa1, 0xbe, 0x95, 0xd9, 0x0d, 0x5b, 0x9c, 0xb2, 0x54, 0xc6, 0x38, 0xa5,
	0x2a, 0x93, 0x5a, 0x92, 0x87, 0xb3, 0xd3, 0x5c, 0x8b, 0xe8, 0x86, 0x5a, 0x3d, 0x38, 0x98, 0x48,
	0x39, 0x99, 0x22, 0x33, 0xf2, 0x78, 0xfe, 0x85, 0x61, 0xaa, 0x74, 0x51, 0xd1, 0xc1, 0x7e, 0x8a,
	0x5a, 0xc4, 0x42, 0x8b, 0x8d, 0x36, 0xe1, 0x0f, 0x07, 0xee, 0x5d, 0x56, 0x1d, 0x48, 0x17, 0x9a,
	0x49, 0xec, 0x3b, 0x7d, 0xe7, 0xa4, 0xcd, 0x9b, 0x49, 0x4c, 0x5e, 0x41, 0x6b, 0x79, 0xcc, 0x6f,
	0xf6, 0x9d, 0x93, 0xce, 0x20, 0xa0, 0xcb, 0x5b, 0x97, 0x02, 0xfd, 0x68, 0x0b, 0x7e, 0xc7, 0x92,
	0xa7, 0xe0, 0xe6, 0x0a, 0x23, 0x7f, 0xc7, 0x9c, 0x79, 0x44, 0x37, 0x9c, 0xd2, 0x2b, 0x85, 0x11,
	0x37, 0x08, 0x61, 0xe0, 0xe5, 0x5a, 0xe8, 0x79, 0xee, 0xbb, 0x06, 0xde, 0xaf, 0xc3, 0x46, 0xe6,
	0x16, 0x0b, 0x7f, 0x39, 0xe0, 0x96, 0xe7, 0xc9, 0x4b, 0x70, 0x75, 0xa1, 0xd0, 0xd8, 0xed, 0x0e,
	0x8e, 0xff, 0x7a, 0x09, 0xb5, 0xc9, 0xae, 0x0b, 0x85, 0xdc, 0xe0, 0xe4, 0x10, 0xda, 0x96, 0xf8,
	0x70, 0x6e, 0x42, 0xb9, 0x7c, 0xb5, 0x41, 0x02, 0x68, 0x25, 0x6a, 0xf1, 0xe2, 0x6d, 0x12, 0x67,
	0xc6, 0x7d, 0x9b, 0xdf, 0xad, 0x49, 0x1f, 0x3a, 0x65, 0x3d, 0x12, 0x1a, 0x6f, 0x45, 0x61, 0xfc,
	0xb6, 0xf9, 0xfa, 0x16, 0x39, 0x02, 0x98, 0x89, 0x14, 0xaf, 0x30, 0x5b, 0x60, 0xe6, 0xef, 0x1a,
	0x60, 0x6d, 0x87, 0xf4, 0xc0, 0x8b, 0x65, 0x2a, 0x92, 0x99, 0xef, 0x19, 0xcd, 0xae, 0xc2, 0x63,
	0xe8, 0xac, 0x19, 0x25, 0x2d, 0x70, 0xdf, 0x5f, 0x0c, 0xaf, 0xf7, 0x1a, 0x65, 0xf5, 0xe9, 0x62,
	0x78, 0xb9, 0xe7, 0x84, 0x2d, 0xf0, 0xaa, 0x87, 0x08, 0x0f, 0x01, 0x46, 0xa8, 0x39, 0x7e, 0x9b,
	0x63, 0xae, 0x37, 0xbf, 0x2c, 0xfc, 0xee, 0xc0, 0xfd, 0xa1, 0x52, 0xd3, 0x62, 0x0b, 0xf0, 0x1f,
	0xfe, 0x34, 0x7c, 0x02, 0x0f, 0xce, 0x71, 0x8a, 0x1a, 0xb7, 0x78, 0x18, 0xfc, 0x74, 0xa0, 0x6b,
	0x03, 0x97, 0x2f, 0x93, 0x44, 0x48, 0xde, 0xc0, 0xce, 0x08, 0x35, 0x39, 0xa8, 0xf5, 0x5d, 0x65,
	0x0d, 0xfc, 0x9a, 0x68, 0x9b, 0x84, 0x0d, 0x72, 0x06, 0xbb, 0x26, 0x36, 0x79, 0x5c, 0x83, 0xd6,
	0x9f, 0xe3, 0x1f, 0x3d, 0xbc, 0xca, 0x37, 0x39, 0xaa, 0x51, 0x7f, 0x04, 0x0a, 0x7a, 0xb4, 0x9a,
	0x35, 0xba, 0x9c, 0x35, 0xfa, 0xae, 0x9c, 0xb5, 0xb0, 0x71, 0xf6, 0xec, 0x33, 0x9b, 0x24, 0xfa,
	0xeb, 0x7c, 0x4c, 0x23, 0x99, 0x32, 0xdb, 0x85, 0x4d, 0x64, 0x45, 0xb2, 0xd5, 0x2c, 0xbf, 0x56,
	0xb6, 0x1e, 0x7b, 0x46, 0x7a, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x19, 0x8c, 0x0e, 0x57, 0xe9,
	0x03, 0x00, 0x00,
}
