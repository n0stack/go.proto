// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packer/v0/model.proto

/*
Package ppacker is a generated protocol buffer package.

It is generated from these files:
	packer/v0/model.proto

It has these top-level messages:
	Packer
	Spec
	Status
	GetRequest
	ApplyRequest
	DeleteRequest
*/
package ppacker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Packer struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Spec   *Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Packer) Reset()                    { *m = Packer{} }
func (m *Packer) String() string            { return proto.CompactTextString(m) }
func (*Packer) ProtoMessage()               {}
func (*Packer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Packer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Packer) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Packer) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Spec struct {
	Node         string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Repository   string `protobuf:"bytes,3,opt,name=repository" json:"repository,omitempty"`
	Directory    string `protobuf:"bytes,4,opt,name=directory" json:"directory,omitempty"`
	TemplateFile string `protobuf:"bytes,5,opt,name=template_file,json=templateFile" json:"template_file,omitempty"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Spec) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Spec) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *Spec) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *Spec) GetTemplateFile() string {
	if m != nil {
		return m.TemplateFile
	}
	return ""
}

type Status struct {
	Url        string                     `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	UpdateTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Status) GetUpdateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ApplyRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Spec *Spec  `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApplyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApplyRequest) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Packer)(nil), "n0stack.packer.Packer")
	proto.RegisterType((*Spec)(nil), "n0stack.packer.Spec")
	proto.RegisterType((*Status)(nil), "n0stack.packer.Status")
	proto.RegisterType((*GetRequest)(nil), "n0stack.packer.GetRequest")
	proto.RegisterType((*ApplyRequest)(nil), "n0stack.packer.ApplyRequest")
	proto.RegisterType((*DeleteRequest)(nil), "n0stack.packer.DeleteRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KVMService service

type KVMServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Packer, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*Packer, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type kVMServiceClient struct {
	cc *grpc.ClientConn
}

func NewKVMServiceClient(cc *grpc.ClientConn) KVMServiceClient {
	return &kVMServiceClient{cc}
}

func (c *kVMServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Packer, error) {
	out := new(Packer)
	err := grpc.Invoke(ctx, "/n0stack.packer.KVMService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVMServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*Packer, error) {
	out := new(Packer)
	err := grpc.Invoke(ctx, "/n0stack.packer.KVMService/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVMServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/n0stack.packer.KVMService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KVMService service

type KVMServiceServer interface {
	Get(context.Context, *GetRequest) (*Packer, error)
	Apply(context.Context, *ApplyRequest) (*Packer, error)
	Delete(context.Context, *DeleteRequest) (*google_protobuf1.Empty, error)
}

func RegisterKVMServiceServer(s *grpc.Server, srv KVMServiceServer) {
	s.RegisterService(&_KVMService_serviceDesc, srv)
}

func _KVMService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVMServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.packer.KVMService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVMServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVMService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVMServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.packer.KVMService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVMServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVMService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVMServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.packer.KVMService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVMServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KVMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n0stack.packer.KVMService",
	HandlerType: (*KVMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KVMService_Get_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _KVMService_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KVMService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packer/v0/model.proto",
}

func init() { proto.RegisterFile("packer/v0/model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0x6e, 0xee, 0xd2, 0xc0, 0x4d, 0x7f, 0x20, 0x83, 0x96, 0x10, 0x4f, 0x5b, 0xd6, 0x97, 0x7b,
	0x71, 0x53, 0xea, 0xe3, 0x3d, 0x48, 0x45, 0xad, 0x20, 0x82, 0xa4, 0xa2, 0xe0, 0x8b, 0xe4, 0x92,
	0x69, 0x5c, 0xba, 0xe9, 0xae, 0x9b, 0x4d, 0xe1, 0x1e, 0xfc, 0x13, 0xfd, 0x9f, 0x24, 0xbb, 0x39,
	0xdb, 0xcb, 0x71, 0xd2, 0xb7, 0x61, 0xbe, 0x6f, 0xbe, 0x99, 0xf9, 0x76, 0x16, 0x9e, 0xe8, 0xbc,
	0xb8, 0x26, 0x93, 0xde, 0x9e, 0xa6, 0xb5, 0x2a, 0x49, 0x72, 0x6d, 0x94, 0x55, 0x78, 0x78, 0x73,
	0xda, 0xd8, 0xbc, 0xb8, 0xe6, 0x1e, 0x4e, 0x8e, 0x2b, 0xa5, 0x2a, 0x49, 0xa9, 0x43, 0x17, 0xed,
	0x55, 0x6a, 0x45, 0x4d, 0x8d, 0xcd, 0x6b, 0xed, 0x0b, 0x92, 0xa7, 0x43, 0x02, 0xd5, 0xda, 0x2e,
	0x3d, 0xc8, 0x0c, 0x44, 0x9f, 0x9d, 0x0e, 0x1e, 0xc2, 0x48, 0x94, 0x71, 0x70, 0x12, 0xcc, 0x26,
	0xd9, 0x48, 0x94, 0x38, 0x83, 0xb0, 0xd1, 0x54, 0xc4, 0xe3, 0x93, 0x60, 0xb6, 0x77, 0xf6, 0x98,
	0xaf, 0xb7, 0xe5, 0x97, 0x9a, 0x8a, 0xcc, 0x31, 0x90, 0x43, 0xd4, 0xd8, 0xdc, 0xb6, 0x4d, 0x1c,
	0x3a, 0xee, 0xd1, 0x06, 0xd7, 0xa1, 0x59, 0xcf, 0x62, 0xbf, 0x21, 0xec, 0xaa, 0x11, 0x21, 0xbc,
	0x51, 0x25, 0xf5, 0x3d, 0x5d, 0x8c, 0xcf, 0x01, 0x0c, 0x69, 0xd5, 0x08, 0xab, 0xcc, 0xd2, 0xf5,
	0x9e, 0x64, 0xf7, 0x32, 0x38, 0x85, 0x49, 0x29, 0x0c, 0x15, 0x0e, 0x0e, 0x1d, 0x7c, 0x97, 0xc0,
	0x17, 0x70, 0x60, 0xa9, 0xd6, 0x32, 0xb7, 0xf4, 0xe3, 0x4a, 0x48, 0x8a, 0x77, 0x1d, 0x63, 0x7f,
	0x95, 0x7c, 0x2f, 0x24, 0xb1, 0x6f, 0x10, 0xf9, 0x81, 0xf0, 0x11, 0x8c, 0x5b, 0x23, 0xfb, 0xfe,
	0x5d, 0x88, 0x73, 0xd8, 0x6b, 0x75, 0xd9, 0x95, 0x77, 0x2e, 0xc6, 0x23, 0xb7, 0x4f, 0xc2, 0xbd,
	0x83, 0x7c, 0xe5, 0x20, 0xff, 0xb2, 0xb2, 0x38, 0x03, 0x4f, 0xef, 0x12, 0x6c, 0x0a, 0x70, 0x41,
	0x36, 0xa3, 0x5f, 0x2d, 0x35, 0x76, 0xe8, 0x27, 0xfb, 0x00, 0xfb, 0xe7, 0x5a, 0xcb, 0xe5, 0x16,
	0xfc, 0xe1, 0x7e, 0xb3, 0x63, 0x38, 0x78, 0x4b, 0x92, 0x2c, 0x6d, 0x91, 0x3a, 0xfb, 0x13, 0x00,
	0x7c, 0xfc, 0xfa, 0xe9, 0x92, 0xcc, 0xad, 0x28, 0x08, 0xe7, 0x30, 0xbe, 0x20, 0x8b, 0xc9, 0x50,
	0xf2, 0x6e, 0xd8, 0x64, 0xe3, 0xc9, 0xfc, 0x51, 0xb0, 0x1d, 0x7c, 0x0d, 0xbb, 0x6e, 0x6c, 0x9c,
	0x0e, 0x29, 0xf7, 0xb7, 0xf9, 0x8f, 0xc0, 0x39, 0x44, 0x7e, 0x5a, 0x7c, 0x36, 0xe4, 0xac, 0x6d,
	0x91, 0x1c, 0x6d, 0xd8, 0xfc, 0xae, 0x3b, 0x54, 0xb6, 0xf3, 0x26, 0xfd, 0xfe, 0xb2, 0x12, 0xf6,
	0x67, 0xbb, 0xe0, 0x85, 0xaa, 0xd3, 0x5e, 0xc4, 0xdf, 0x33, 0xaf, 0x54, 0xfa, 0xef, 0x9f, 0xcc,
	0xb5, 0x0f, 0x17, 0x91, 0xc3, 0x5e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x86, 0x37, 0x72,
	0x43, 0x03, 0x00, 0x00,
}
