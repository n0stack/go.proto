// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compute/v0/model.proto

/*
Package pcompute is a generated protocol buffer package.

It is generated from these files:
	compute/v0/model.proto

It has these top-level messages:
	Compute
	Spec
	Status
	GetRequest
	ApplyRequest
	DeleteRequest
*/
package pcompute

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import n0stack_metadata "github.com/n0stack/go.proto/metadata/v0"
import n0stack_kvm "github.com/n0stack/go.proto/kvm/v0"
import n0stack_tap "github.com/n0stack/go.proto/tap/v0"
import n0stack_qcow2 "github.com/n0stack/go.proto/qcow2/v0"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Compute struct {
	Id       string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Metadata *n0stack_metadata.Metadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *Spec                      `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status   *Status                    `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Compute) Reset()                    { *m = Compute{} }
func (m *Compute) String() string            { return proto.CompactTextString(m) }
func (*Compute) ProtoMessage()               {}
func (*Compute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Compute) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Compute) GetMetadata() *n0stack_metadata.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Compute) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Compute) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Spec struct {
	// CPU
	Vcpus uint32 `protobuf:"varint,2,opt,name=vcpus" json:"vcpus,omitempty"`
	// Memory
	MemoryBytes uint64 `protobuf:"varint,3,opt,name=memory_bytes,json=memoryBytes" json:"memory_bytes,omitempty"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Spec) GetVcpus() uint32 {
	if m != nil {
		return m.Vcpus
	}
	return 0
}

func (m *Spec) GetMemoryBytes() uint64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

// Volume
type Spec_NIC struct {
	Network string   `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Ipaddrs []string `protobuf:"bytes,2,rep,name=ipaddrs" json:"ipaddrs,omitempty"`
}

func (m *Spec_NIC) Reset()                    { *m = Spec_NIC{} }
func (m *Spec_NIC) String() string            { return proto.CompactTextString(m) }
func (*Spec_NIC) ProtoMessage()               {}
func (*Spec_NIC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Spec_NIC) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Spec_NIC) GetIpaddrs() []string {
	if m != nil {
		return m.Ipaddrs
	}
	return nil
}

type Status struct {
	Vm     *Status_VM     `protobuf:"bytes,1,opt,name=vm" json:"vm,omitempty"`
	Volume *Status_Volume `protobuf:"bytes,2,opt,name=volume" json:"volume,omitempty"`
	Nics   []*Status_NIC  `protobuf:"bytes,3,rep,name=nics" json:"nics,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetVm() *Status_VM {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *Status) GetVolume() *Status_Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *Status) GetNics() []*Status_NIC {
	if m != nil {
		return m.Nics
	}
	return nil
}

type Status_VM struct {
	Id         string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Spec       *n0stack_kvm.Spec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Connection string            `protobuf:"bytes,3,opt,name=connection" json:"connection,omitempty"`
}

func (m *Status_VM) Reset()                    { *m = Status_VM{} }
func (m *Status_VM) String() string            { return proto.CompactTextString(m) }
func (*Status_VM) ProtoMessage()               {}
func (*Status_VM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Status_VM) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Status_VM) GetSpec() *n0stack_kvm.Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Status_VM) GetConnection() string {
	if m != nil {
		return m.Connection
	}
	return ""
}

type Status_Volume struct {
	Id   string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Spec *n0stack_qcow2.Spec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *Status_Volume) Reset()                    { *m = Status_Volume{} }
func (m *Status_Volume) String() string            { return proto.CompactTextString(m) }
func (*Status_Volume) ProtoMessage()               {}
func (*Status_Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *Status_Volume) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Status_Volume) GetSpec() *n0stack_qcow2.Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type Status_NIC struct {
	Id   string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Spec *n0stack_tap.Spec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *Status_NIC) Reset()                    { *m = Status_NIC{} }
func (m *Status_NIC) String() string            { return proto.CompactTextString(m) }
func (*Status_NIC) ProtoMessage()               {}
func (*Status_NIC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 2} }

func (m *Status_NIC) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Status_NIC) GetSpec() *n0stack_tap.Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ApplyRequest struct {
	Id       string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Metadata *n0stack_metadata.Metadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *Spec                      `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApplyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApplyRequest) GetMetadata() *n0stack_metadata.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ApplyRequest) GetSpec() *Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Compute)(nil), "n0stack.compute.Compute")
	proto.RegisterType((*Spec)(nil), "n0stack.compute.Spec")
	proto.RegisterType((*Spec_NIC)(nil), "n0stack.compute.Spec.NIC")
	proto.RegisterType((*Status)(nil), "n0stack.compute.Status")
	proto.RegisterType((*Status_VM)(nil), "n0stack.compute.Status.VM")
	proto.RegisterType((*Status_Volume)(nil), "n0stack.compute.Status.Volume")
	proto.RegisterType((*Status_NIC)(nil), "n0stack.compute.Status.NIC")
	proto.RegisterType((*GetRequest)(nil), "n0stack.compute.GetRequest")
	proto.RegisterType((*ApplyRequest)(nil), "n0stack.compute.ApplyRequest")
	proto.RegisterType((*DeleteRequest)(nil), "n0stack.compute.DeleteRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ComputeService service

type ComputeServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Compute, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*Compute, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type computeServiceClient struct {
	cc *grpc.ClientConn
}

func NewComputeServiceClient(cc *grpc.ClientConn) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Compute, error) {
	out := new(Compute)
	err := grpc.Invoke(ctx, "/n0stack.compute.ComputeService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*Compute, error) {
	out := new(Compute)
	err := grpc.Invoke(ctx, "/n0stack.compute.ComputeService/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/n0stack.compute.ComputeService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ComputeService service

type ComputeServiceServer interface {
	Get(context.Context, *GetRequest) (*Compute, error)
	Apply(context.Context, *ApplyRequest) (*Compute, error)
	Delete(context.Context, *DeleteRequest) (*google_protobuf.Empty, error)
}

func RegisterComputeServiceServer(s *grpc.Server, srv ComputeServiceServer) {
	s.RegisterService(&_ComputeService_serviceDesc, srv)
}

func _ComputeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.compute.ComputeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.compute.ComputeService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.compute.ComputeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n0stack.compute.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ComputeService_Get_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _ComputeService_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ComputeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compute/v0/model.proto",
}

func init() { proto.RegisterFile("compute/v0/model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x9d, 0xd4, 0xa5, 0x93, 0xb6, 0x88, 0xa5, 0xb4, 0x96, 0x0b, 0xa5, 0x58, 0x42, 0x04,
	0x0e, 0x76, 0x09, 0x52, 0x25, 0x04, 0x42, 0x6a, 0x02, 0xaa, 0x7a, 0x48, 0x0f, 0xae, 0xd4, 0x03,
	0x1c, 0x90, 0x63, 0x0f, 0xc1, 0x4a, 0xd6, 0xbb, 0x8d, 0xd7, 0xae, 0xc2, 0x8d, 0x0f, 0xe2, 0x7f,
	0xf8, 0x17, 0x2e, 0xc8, 0xbb, 0x9b, 0xd4, 0x89, 0x15, 0xc1, 0xa9, 0x37, 0xef, 0xbc, 0x37, 0xf3,
	0xde, 0xcc, 0xae, 0x07, 0xf6, 0x22, 0x46, 0x79, 0x2e, 0xd0, 0x2f, 0x8e, 0x7d, 0xca, 0x62, 0x1c,
	0x7b, 0x7c, 0xc2, 0x04, 0x23, 0xf7, 0xd3, 0xe3, 0x4c, 0x84, 0xd1, 0xc8, 0xd3, 0xb8, 0x73, 0x30,
	0x64, 0x6c, 0x38, 0x46, 0x5f, 0xc2, 0x83, 0xfc, 0x9b, 0x8f, 0x94, 0x8b, 0xa9, 0x62, 0x3b, 0xfb,
	0x14, 0x45, 0x18, 0x87, 0x22, 0x5c, 0x2a, 0xe3, 0x90, 0x51, 0x41, 0x6b, 0x31, 0x11, 0xf2, 0xe5,
	0xd8, 0xee, 0x75, 0xc4, 0x6e, 0x3a, 0x4b, 0x51, 0xf7, 0x97, 0x01, 0x1b, 0x3d, 0xa5, 0x4f, 0x76,
	0xc0, 0x4c, 0x62, 0xdb, 0x38, 0x32, 0xda, 0x9b, 0x81, 0x99, 0xc4, 0xe4, 0x04, 0xee, 0xcd, 0x44,
	0x6d, 0xf3, 0xc8, 0x68, 0xb7, 0x3a, 0x8e, 0x37, 0xf3, 0x3c, 0x03, 0xbc, 0xbe, 0xfe, 0x08, 0xe6,
	0x5c, 0xf2, 0x12, 0x9a, 0x19, 0xc7, 0xc8, 0x6e, 0xc8, 0x9c, 0x47, 0xde, 0x52, 0x9f, 0xde, 0x25,
	0xc7, 0x28, 0x90, 0x14, 0xe2, 0x83, 0x95, 0x89, 0x50, 0xe4, 0x99, 0xdd, 0x94, 0xe4, 0xfd, 0x3a,
	0x59, 0xc2, 0x81, 0xa6, 0xb9, 0x3f, 0xa0, 0x59, 0xa6, 0x93, 0x5d, 0x58, 0x2f, 0x22, 0x9e, 0x67,
	0xd2, 0xd8, 0x76, 0xa0, 0x0e, 0xe4, 0x19, 0x6c, 0x51, 0xa4, 0x6c, 0x32, 0xfd, 0x3a, 0x98, 0x0a,
	0xcc, 0xa4, 0x83, 0x66, 0xd0, 0x52, 0xb1, 0x6e, 0x19, 0x72, 0xde, 0x42, 0xe3, 0xe2, 0xbc, 0x47,
	0x6c, 0xd8, 0x48, 0x51, 0xdc, 0xb0, 0xc9, 0x48, 0x37, 0x3c, 0x3b, 0x96, 0x48, 0xc2, 0xc3, 0x38,
	0x9e, 0x94, 0xb5, 0x1b, 0x25, 0xa2, 0x8f, 0xee, 0x1f, 0x13, 0x2c, 0x65, 0x87, 0xbc, 0x02, 0xb3,
	0xa0, 0x32, 0xb3, 0x3a, 0x94, 0x45, 0xcf, 0xde, 0x55, 0x3f, 0x30, 0x0b, 0x4a, 0x4e, 0xc0, 0x2a,
	0xd8, 0x38, 0xa7, 0xa8, 0x87, 0x78, 0xb8, 0x92, 0x2f, 0x59, 0x81, 0x66, 0x13, 0x1f, 0x9a, 0x69,
	0x12, 0x95, 0x4d, 0x34, 0xda, 0xad, 0xce, 0xc1, 0xaa, 0xac, 0x8b, 0xf3, 0x5e, 0x20, 0x89, 0xce,
	0x17, 0x30, 0xaf, 0xfa, 0xb5, 0x5b, 0x7c, 0xae, 0x6f, 0x43, 0x89, 0x3f, 0x98, 0x97, 0x19, 0x15,
	0xb4, 0x7a, 0x13, 0x87, 0x00, 0x11, 0x4b, 0x53, 0x8c, 0x44, 0xc2, 0x52, 0x39, 0xb8, 0xcd, 0xa0,
	0x12, 0x71, 0x4e, 0xc1, 0x52, 0xfe, 0x6a, 0x02, 0x2f, 0x16, 0x04, 0x1e, 0xce, 0x05, 0xe4, 0x7b,
	0xab, 0x48, 0x38, 0xef, 0xd5, 0xe8, 0xff, 0xd7, 0xa0, 0x08, 0x79, 0x25, 0xdb, 0x7d, 0x0c, 0x70,
	0x86, 0x22, 0xc0, 0xeb, 0x1c, 0x33, 0xb1, 0x5c, 0xc4, 0xfd, 0x69, 0xc0, 0xd6, 0x29, 0xe7, 0xe3,
	0xe9, 0x0a, 0xc2, 0x1d, 0x3c, 0x66, 0xf7, 0x29, 0x6c, 0x7f, 0xc4, 0x31, 0x0a, 0x5c, 0xe1, 0xa1,
	0xf3, 0xdb, 0x80, 0x1d, 0xfd, 0xb3, 0x5d, 0xe2, 0xa4, 0x48, 0x22, 0x24, 0x1f, 0xa0, 0x71, 0x86,
	0x82, 0xd4, 0x6f, 0xf7, 0xb6, 0x57, 0xc7, 0xae, 0x81, 0xba, 0x88, 0xbb, 0x46, 0xba, 0xb0, 0x2e,
	0xdb, 0x26, 0x4f, 0x6a, 0xa4, 0xea, 0x38, 0xfe, 0x51, 0xc3, 0x52, 0xbe, 0x49, 0xfd, 0x69, 0x2e,
	0x34, 0xe4, 0xec, 0x79, 0x6a, 0x45, 0x79, 0xb3, 0x15, 0xe5, 0x7d, 0x2a, 0x57, 0x94, 0xbb, 0xd6,
	0x7d, 0xfd, 0xd9, 0x1f, 0x26, 0xe2, 0x7b, 0x3e, 0x28, 0x33, 0x7d, 0x5d, 0xc5, 0x1f, 0x32, 0xc5,
	0xf4, 0x6f, 0x57, 0xe0, 0x3b, 0xae, 0xbf, 0x07, 0x96, 0x84, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0xa3, 0x99, 0xd3, 0x43, 0x20, 0x05, 0x00, 0x00,
}
